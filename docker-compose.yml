version: '3.8'

services:
  # Validation Service
  validation-service:
    build: ./services/validation
    container_name: rag_validation
    ports:
      - "8001:8001"
    environment:
      - LOG_LEVEL=INFO
      - ENVIRONMENT=production
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - rag-network

  # Parser Service
  parser-service:
    build: ./services/parser
    container_name: rag_parser
    ports:
      - "8002:8002"
    environment:
      - LLAMAPARSE_API_KEY=${LLAMAPARSE_API_KEY}
      - LOG_LEVEL=INFO
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - rag-network

  # Embedder Service
  embedder-service:
    build: ./services/embedder
    container_name: rag_embedder
    ports:
      - "8003:8003"
    environment:
      - YANDEX_API_KEY=${YANDEX_API_KEY}
      - YANDEX_FOLDER_ID=${YANDEX_FOLDER_ID}
      - LOG_LEVEL=INFO
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - rag-network
    depends_on:
      - redis

  # Storage Service
  storage-service:
    build: ./services/storage
    container_name: rag_storage
    ports:
      - "8004:8004"
    environment:
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
      - LOG_LEVEL=INFO
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - rag-network

  # Redis (for caching and rate limiting)
  redis:
    image: redis:7-alpine
    container_name: rag_redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - rag-network
    command: redis-server --appendonly yes

  # Nginx (reverse proxy)
  nginx:
    image: nginx:alpine
    container_name: rag_nginx
    ports:
      - "8080:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - validation-service
      - parser-service
      - embedder-service
      - storage-service
    restart: unless-stopped
    networks:
      - rag-network

  # Prometheus (metrics collection)
  prometheus:
    image: prom/prometheus:latest
    container_name: rag_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    restart: unless-stopped
    networks:
      - rag-network

networks:
  rag-network:
    driver: bridge

volumes:
  redis-data:
  prometheus-data:
